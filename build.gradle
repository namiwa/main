import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.4'
}

version '0.1.0'

checkstyle {
    toolVersion = '8.23'
}

shadowJar {
    archiveBaseName = "Planner"
    archiveVersion = "v1.3.0"
    archiveClassifier = null
    archiveAppendix = null
}

javafx {
    version = "11.0.2"

    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.2')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.2')

    // https://mvnrepository.com/artifact/com.joestelmach/natty
    compile group: 'com.joestelmach', name: 'natty', version: '0.13'
    compile group: 'org.antlr', name: 'antlr-runtime', version: '3.5.2'
    compile group: 'org.mnode.ical4j', name: 'ical4j', version: '1.0.2'
    compile group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.10'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

    // https://mvnrepository.com/artifact/net.sourceforge.argparse4j/argparse4j
    compile group: 'net.sourceforge.argparse4j', name: 'argparse4j', version: '0.8.1'

    String testFxVersion = '4.0.15-alpha'
    String jUnitVersion = '5.5.0'
    String javaFxVersion = '11'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-media', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-media', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-media', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-web', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-web', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-web', version: javaFxVersion, classifier: 'linux'


    testImplementation group: 'org.testfx', name: 'testfx-core', version: testFxVersion
    testRuntimeOnly group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-11+26'
}

test {
    useJUnitPlatform()
}

task coverage(type: JacocoReport) {
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)
    executionData.from files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = false
        xml.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}


test {
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.SKIPPED

        // Prints the currently running test's name in the CI's build log,
        // so that we can check if tests are being silently skipped or
        // stalling the build.
        if (System.env.'CI') {
            events << TestLogEvent.STARTED
        }
    }

    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}


jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

coveralls {
    sourceDirs = sourceSets.main.allSource.srcDirs.absolutePath
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}


application {
    // Change this to your main class.
    mainClassName = "planner.main.GuiLauncher"
}

run {
    standardInput = System.in
}


